<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security.xsd">


	<beans:bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
    	<beans:property name="securityManager" ref="securityManager"/>
	    <!-- override these for application-specific URLs if you like:
	    <beans:property name="loginUrl" value="/login.jsp"/>
	    <beans:property name="successUrl" value="/home.jsp"/>
	    <beans:property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
	    <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean  -->
	    <!-- defined will be automatically acquired and available via its beanName in chain        -->
	    <!-- definitions, but you can perform instance overrides or name aliases here if you like: -->
	    <!-- <property name="filters">
	        <util:map>
	            <entry key="anAlias" value-ref="someFilter"/>
	        </util:map>
	    </beans:property> 
	    <beans:property name="filterChainDefinitions">
        <value>
            # some example chain definitions:
            /admin/** = authc, roles[admin]
            /docs/** = authc, perms[document:read]
            /** = authc
            # more URL-to-FilterChain definitions here
        </value>
    	</beans:property>-->
	</beans:bean>

	<!-- Define any javax.servlet.Filter beans you want anywhere in this application context.   -->
	<!-- They will automatically be acquired by the 'shiroFilter' bean above and made available -->
	<!-- to the 'filterChainDefinitions' property.  Or you can manually/explicitly add them     -->
	<!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for more details.       -->
	<!--  <beans:bean id="someFilter" class="..."/>
	<beans:bean id="anotherFilter" class="..."></beans:bean>-->

	<beans:bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
    <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
    <beans:property name="realm" ref="authenticationAuthorizationRealm"/>
    <!-- By default the servlet container sessions will be used.  Uncomment this line
         to use shiro's native sessions (see the JavaDoc for more): -->
    <!-- <beans:property name="sessionMode" value="native"/>-->
	</beans:bean>
	
	<beans:bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<!-- Define the Shiro Realm implementation you want to use to connect to your back-end -->
	<!-- security datasource: -->
	<beans:bean id="authenticationAuthorizationRealm" class="com.contento3.security.DefaultAuthenticationAuthorizationRealm">
		<beans:property name="saltedHibernateUserDao" ref="saltedHibernateUserDao" />	
		<beans:property name="credentialsMatcher" ref="hashMatcher" />	
	</beans:bean>
 
    <beans:bean id="hashMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
    		<beans:property name="hashAlgorithmName" value="Sha-256" />	
    		<beans:property name="hashIterations" value="1" />
    		<beans:property name="hashSalted" value="true" />
	</beans:bean> 
    
    <beans:bean id="passwordService" class="org.apache.shiro.authc.credential.DefaultPasswordService">
	</beans:bean> 
    
    <beans:bean id="passwordMatcher" class="org.apache.shiro.authc.credential.PasswordMatcher">
    		<beans:property name="passwordService" ref="passwordService" />	
	</beans:bean> 
    
    
	<beans:bean id="jdbcdataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName">
	    	<beans:value>com.mysql.jdbc.Driver</beans:value>
		</beans:property>
		<beans:property name="url">
	    	<beans:value>jdbc:mysql://localhost:3306/platform_users</beans:value>
		</beans:property>
		<beans:property name="username">
	    	<beans:value>root</beans:value>
		</beans:property>
		<beans:property name="password">
	    	<beans:value>root</beans:value>
		</beans:property>
	</beans:bean>
	
<!--	 
	<beans:bean id="jdbcdataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url" value="jdbc:mysql://c3prod.ccqbimjzi68o.us-east-1.rds.amazonaws.com:3306/platform_users" />
		<beans:property name="username" value="superuser" />
		<beans:property name="password" value="superuser" />
	</beans:bean>
-->	
	<http auto-config='true'>
		<intercept-url  pattern="/home/**" access="ROLE_USER" />
		<intercept-url pattern="/jsp/login*" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/jsp/login_error*" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/jsp/codemirror.html" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<form-login login-page='/jsp/login' default-target-url="/home" authentication-failure-url="/jsp/login_error" />
        <logout invalidate-session="true" logout-success-url="/jsp/login"/>
        <session-management>
    		<concurrency-control max-sessions="1" expired-url="/jsp/login?error=expired"/>
  		</session-management>
	</http>

	<beans:bean class="org.springframework.security.authentication.dao.ReflectionSaltSource" id="saltSource">
  		<beans:property name="userPropertyToUse" value="salt"/>
	</beans:bean>
	
 	<beans:bean id="jdbcUserServiceCustom" class="com.contento3.security.CustomJdbcDaoImpl">
		<beans:property name="dataSource" ref="jdbcdataSource"/>
		 <beans:property name="enableGroups" value="true"/>
 		 <beans:property name="enableAuthorities" value="false"/>
 		 <beans:property name="usersByUsernameQuery">
	     	<beans:value>select username,password,enabled,
	     	salt from users where username = ?
    	 	</beans:value>
  		</beans:property>
	</beans:bean>

	<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder"/>

<!-- This is used to encrypt the users manually before the server startups.
	We can create a utility to encrypt uncrypted passwords.
 -->
<!-- 
	<beans:bean class="com.contento3.security.DatabasePasswordSecurerBean" 
             init-method="secureDatabase" depends-on="jdbcdataSource">
  		<beans:property name="dataSource" ref="jdbcdataSource"/>
	</beans:bean>
 -->	
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="jdbcUserServiceCustom">
			<password-encoder ref="passwordEncoder">
				<salt-source ref="saltSource"/>
			</password-encoder>
		</authentication-provider>
	</authentication-manager>



<!-- 
	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="admin" password="admin" authorities="ROLE_USER,ROLE_ADMIN" />
				<user name="demo" password="demo" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>
-->

	<global-method-security pre-post-annotations="enabled" />

</beans:beans>
